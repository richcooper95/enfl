# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  app:
    build:
      context: .
    ports:
      - 8000:8000
    container_name: enfl
    command: python manage.py runserver 0.0.0.0:8000
    # `depends_on` tells Docker Compose to start the database before your application.
    depends_on:
      db:
        condition: service_healthy

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
  db:
    image: postgres:15
    restart: always
    user: postgres
    container_name: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=enfl
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 2s
      timeout: 1m
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt

